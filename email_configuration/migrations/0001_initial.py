# Generated by Django 4.2.23 on 2025-08-11 11:04

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='EmailConfiguration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Configuration name (e.g., Primary SMTP, Backup SMTP)', max_length=100)),
                ('protocol', models.CharField(choices=[('smtp', 'SMTP'), ('imap', 'IMAP'), ('pop3', 'POP3')], default='smtp', max_length=10)),
                ('host', models.CharField(help_text='Email server hostname or IP address', max_length=255)),
                ('port', models.IntegerField(help_text='Email server port number')),
                ('encryption', models.CharField(choices=[('none', 'None'), ('ssl', 'SSL'), ('tls', 'TLS'), ('starttls', 'STARTTLS')], default='tls', max_length=10)),
                ('username', models.CharField(help_text='Email server username', max_length=255)),
                ('password', models.CharField(help_text='Email server password', max_length=255)),
                ('use_authentication', models.BooleanField(default=True, help_text='Whether to use authentication')),
                ('timeout', models.IntegerField(default=30, help_text='Connection timeout in seconds')),
                ('max_connections', models.IntegerField(default=10, help_text='Maximum concurrent connections')),
                ('delete_after_fetch', models.BooleanField(default=False, help_text='Delete emails after fetching (POP3)')),
                ('fetch_interval', models.IntegerField(default=5, help_text='Fetch interval in minutes')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this configuration is active')),
                ('is_default', models.BooleanField(default=False, help_text='Whether this is the default configuration')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_tested', models.DateTimeField(blank=True, null=True)),
                ('last_test_status', models.CharField(choices=[('success', 'Success'), ('failed', 'Failed'), ('untested', 'Untested')], default='untested', max_length=20)),
                ('last_test_message', models.TextField(blank=True, help_text='Last test result message')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='email_configs_created', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='email_configs_updated', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Email Configuration',
                'verbose_name_plural': 'Email Configurations',
                'ordering': ['-is_default', 'name'],
            },
        ),
        migrations.CreateModel(
            name='EmailTestResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('test_type', models.CharField(choices=[('connection', 'Connection Test'), ('authentication', 'Authentication Test'), ('send_test', 'Send Test Email'), ('receive_test', 'Receive Test Email'), ('full_test', 'Full Configuration Test')], max_length=20)),
                ('status', models.CharField(choices=[('success', 'Success'), ('failed', 'Failed'), ('partial', 'Partial Success'), ('timeout', 'Timeout'), ('error', 'Error')], max_length=20)),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('duration', models.FloatField(blank=True, help_text='Test duration in seconds', null=True)),
                ('test_message', models.TextField(blank=True, help_text='Detailed test message')),
                ('error_details', models.TextField(blank=True, help_text='Error details if test failed')),
                ('stack_trace', models.TextField(blank=True, help_text='Stack trace for debugging')),
                ('test_email', models.EmailField(blank=True, help_text='Test email address used', max_length=254)),
                ('test_subject', models.CharField(blank=True, help_text='Test email subject', max_length=255)),
                ('configuration', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='test_results', to='email_configuration.emailconfiguration')),
                ('tested_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='email_tests_performed', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Email Test Result',
                'verbose_name_plural': 'Email Test Results',
                'ordering': ['-started_at'],
            },
        ),
        migrations.CreateModel(
            name='EmailNotification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('system_alert', 'System Alert'), ('user_notification', 'User Notification'), ('business_workflow', 'Business Workflow'), ('error_report', 'Error Report'), ('backup_notification', 'Backup Notification')], max_length=20)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('normal', 'Normal'), ('high', 'High'), ('urgent', 'Urgent')], default='normal', max_length=10)),
                ('subject', models.CharField(max_length=255)),
                ('message', models.TextField()),
                ('recipients', models.JSONField(help_text='List of recipient email addresses')),
                ('cc_recipients', models.JSONField(blank=True, default=list, help_text='List of CC recipient email addresses')),
                ('bcc_recipients', models.JSONField(blank=True, default=list, help_text='List of BCC recipient email addresses')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('sending', 'Sending'), ('sent', 'Sent'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('scheduled_at', models.DateTimeField(blank=True, help_text='When to send the notification', null=True)),
                ('sent_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('retry_count', models.IntegerField(default=0, help_text='Number of retry attempts')),
                ('max_retries', models.IntegerField(default=3, help_text='Maximum retry attempts')),
                ('error_message', models.TextField(blank=True, help_text='Error message if sending failed')),
                ('last_retry_at', models.DateTimeField(blank=True, null=True)),
                ('configuration', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications_sent', to='email_configuration.emailconfiguration')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications_created', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Email Notification',
                'verbose_name_plural': 'Email Notifications',
                'ordering': ['-created_at'],
            },
        ),
    ]
