# Generated by Django 4.2.23 on 2025-08-12 07:31

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='EmailCampaign',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Campaign name', max_length=200)),
                ('description', models.TextField(blank=True, help_text='Campaign description')),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('scheduled', 'Scheduled'), ('queued', 'Queued'), ('sending', 'Sending'), ('paused', 'Paused'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('failed', 'Failed')], default='draft', max_length=20)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('normal', 'Normal'), ('high', 'High'), ('urgent', 'Urgent')], default='normal', max_length=20)),
                ('sender_name', models.CharField(help_text='Campaign sender name', max_length=100)),
                ('sender_email', models.EmailField(help_text='Campaign sender email', max_length=254)),
                ('reply_to_email', models.EmailField(blank=True, help_text='Reply-to email address', max_length=254)),
                ('scheduled_at', models.DateTimeField(blank=True, help_text='When to start sending', null=True)),
                ('send_speed', models.PositiveIntegerField(default=100, help_text='Emails per minute', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10000)])),
                ('batch_size', models.PositiveIntegerField(default=1000, help_text='Emails per batch', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10000)])),
                ('tags', models.JSONField(blank=True, default=list, help_text='Campaign tags')),
                ('category', models.CharField(blank=True, help_text='Campaign category', max_length=100)),
                ('track_opens', models.BooleanField(default=True, help_text='Track email opens')),
                ('track_clicks', models.BooleanField(default=True, help_text='Track link clicks')),
                ('track_unsubscribes', models.BooleanField(default=True, help_text='Track unsubscribes')),
                ('include_unsubscribe_link', models.BooleanField(default=True, help_text='Include unsubscribe link')),
                ('unsubscribe_text', models.CharField(default='Unsubscribe', help_text='Unsubscribe link text', max_length=200)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='campaigns_created', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Email Campaign',
                'verbose_name_plural': 'Email Campaigns',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='RecipientList',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Recipient list name', max_length=200)),
                ('description', models.TextField(blank=True, help_text='List description')),
                ('list_type', models.CharField(choices=[('csv_upload', 'CSV Upload'), ('database_query', 'Database Query'), ('manual_entry', 'Manual Entry'), ('api_import', 'API Import')], default='csv_upload', max_length=20)),
                ('source_file', models.FileField(blank=True, help_text='Uploaded CSV/Excel file', null=True, upload_to='recipient_lists/')),
                ('query_model', models.CharField(blank=True, help_text='Django model name for query', max_length=100)),
                ('query_filters', models.JSONField(blank=True, default=dict, help_text='Query filters')),
                ('tags', models.JSONField(blank=True, default=list, help_text='List tags')),
                ('category', models.CharField(blank=True, help_text='List category', max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recipient_lists_created', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Recipient List',
                'verbose_name_plural': 'Recipient Lists',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Recipient',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(help_text='Recipient email address', max_length=254)),
                ('first_name', models.CharField(blank=True, help_text='Recipient first name', max_length=100)),
                ('last_name', models.CharField(blank=True, help_text='Recipient last name', max_length=100)),
                ('custom_fields', models.JSONField(blank=True, default=dict, help_text='Custom recipient fields')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('queued', 'Queued'), ('sent', 'Sent'), ('delivered', 'Delivered'), ('opened', 'Opened'), ('clicked', 'Clicked'), ('bounced', 'Bounced'), ('failed', 'Failed'), ('unsubscribed', 'Unsubscribed'), ('spam', 'Marked as Spam')], default='pending', max_length=20)),
                ('sent_at', models.DateTimeField(blank=True, null=True)),
                ('delivered_at', models.DateTimeField(blank=True, null=True)),
                ('opened_at', models.DateTimeField(blank=True, null=True)),
                ('clicked_at', models.DateTimeField(blank=True, null=True)),
                ('message_id', models.CharField(blank=True, help_text='Email message ID', max_length=255)),
                ('tracking_id', models.CharField(blank=True, help_text='Tracking identifier', max_length=255)),
                ('error_message', models.TextField(blank=True, help_text='Error details if sending failed')),
                ('retry_count', models.PositiveIntegerField(default=0, help_text='Number of retry attempts')),
                ('max_retries', models.PositiveIntegerField(default=3, help_text='Maximum retry attempts')),
                ('is_unsubscribed', models.BooleanField(default=False, help_text='Recipient unsubscribed')),
                ('unsubscribe_date', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('campaign', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recipients', to='bulk_email_sender.emailcampaign')),
                ('recipient_list', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='recipients', to='bulk_email_sender.recipientlist')),
            ],
            options={
                'verbose_name': 'Recipient',
                'verbose_name_plural': 'Recipients',
                'ordering': ['-created_at'],
                'unique_together': {('campaign', 'email')},
            },
        ),
        migrations.CreateModel(
            name='EmailTracking',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('tracking_type', models.CharField(choices=[('open', 'Email Open'), ('click', 'Link Click'), ('bounce', 'Bounce'), ('unsubscribe', 'Unsubscribe'), ('spam', 'Spam Report')], max_length=20)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, help_text='IP address of the event', null=True)),
                ('user_agent', models.TextField(blank=True, help_text='User agent string')),
                ('location_data', models.JSONField(blank=True, default=dict, help_text='Geographic location data')),
                ('clicked_url', models.URLField(blank=True, help_text='URL that was clicked')),
                ('link_text', models.CharField(blank=True, help_text='Text of the clicked link', max_length=255)),
                ('bounce_type', models.CharField(blank=True, help_text='Type of bounce (hard/soft)', max_length=50)),
                ('bounce_reason', models.TextField(blank=True, help_text='Reason for bounce')),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Additional tracking metadata')),
                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tracking_events', to='bulk_email_sender.recipient')),
            ],
            options={
                'verbose_name': 'Email Tracking',
                'verbose_name_plural': 'Email Tracking',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='EmailTemplate',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Template name', max_length=200)),
                ('subject', models.CharField(help_text='Email subject line', max_length=255)),
                ('html_content', models.TextField(help_text='HTML email content')),
                ('plain_text_content', models.TextField(help_text='Plain text email content')),
                ('template_type', models.CharField(choices=[('newsletter', 'Newsletter'), ('promotional', 'Promotional'), ('transactional', 'Transactional'), ('notification', 'Notification'), ('custom', 'Custom')], default='custom', max_length=20)),
                ('description', models.TextField(blank=True, help_text='Template description')),
                ('tags', models.JSONField(blank=True, default=list, help_text='Template tags')),
                ('is_active', models.BooleanField(default=True, help_text='Template availability')),
                ('available_placeholders', models.JSONField(blank=True, default=list, help_text='Available placeholder variables (e.g., {{customer_name}})')),
                ('sender_name', models.CharField(blank=True, help_text='Default sender name', max_length=100)),
                ('sender_email', models.EmailField(blank=True, help_text='Default sender email', max_length=254)),
                ('reply_to_email', models.EmailField(blank=True, help_text='Reply-to email address', max_length=254)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('version', models.PositiveIntegerField(default=1, help_text='Template version')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='email_templates_created', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Email Template',
                'verbose_name_plural': 'Email Templates',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='EmailSettings',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Configuration name', max_length=100)),
                ('is_active', models.BooleanField(default=True, help_text='Active configuration')),
                ('provider', models.CharField(choices=[('smtp', 'SMTP'), ('sendgrid', 'SendGrid'), ('mailgun', 'Mailgun'), ('amazon_ses', 'Amazon SES'), ('postmark', 'Postmark')], default='smtp', max_length=20)),
                ('smtp_host', models.CharField(blank=True, help_text='SMTP server host', max_length=255)),
                ('smtp_port', models.PositiveIntegerField(default=587, help_text='SMTP server port')),
                ('smtp_username', models.CharField(blank=True, help_text='SMTP username', max_length=255)),
                ('smtp_password', models.CharField(blank=True, help_text='SMTP password', max_length=255)),
                ('smtp_use_tls', models.BooleanField(default=True, help_text='Use TLS encryption')),
                ('smtp_use_ssl', models.BooleanField(default=False, help_text='Use SSL encryption')),
                ('api_key', models.CharField(blank=True, help_text='API key for service', max_length=255)),
                ('api_secret', models.CharField(blank=True, help_text='API secret for service', max_length=255)),
                ('api_url', models.URLField(blank=True, help_text='API endpoint URL')),
                ('daily_limit', models.PositiveIntegerField(default=10000, help_text='Daily sending limit')),
                ('hourly_limit', models.PositiveIntegerField(default=1000, help_text='Hourly sending limit')),
                ('rate_limit', models.PositiveIntegerField(default=100, help_text='Emails per minute')),
                ('default_sender_name', models.CharField(blank=True, help_text='Default sender name', max_length=100)),
                ('default_sender_email', models.EmailField(blank=True, help_text='Default sender email', max_length=254)),
                ('default_reply_to', models.EmailField(blank=True, help_text='Default reply-to email', max_length=254)),
                ('spf_record', models.TextField(blank=True, help_text='SPF record configuration')),
                ('dkim_private_key', models.TextField(blank=True, help_text='DKIM private key')),
                ('dkim_selector', models.CharField(blank=True, help_text='DKIM selector', max_length=100)),
                ('dmarc_policy', models.CharField(blank=True, help_text='DMARC policy', max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='email_settings_created', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Email Settings',
                'verbose_name_plural': 'Email Settings',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='emailcampaign',
            name='template',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='campaigns', to='bulk_email_sender.emailtemplate'),
        ),
        migrations.CreateModel(
            name='EmailQueue',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('batch_number', models.PositiveIntegerField(help_text='Batch sequence number')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('total_emails', models.PositiveIntegerField(help_text='Total emails in this batch')),
                ('sent_emails', models.PositiveIntegerField(default=0, help_text='Successfully sent emails')),
                ('failed_emails', models.PositiveIntegerField(default=0, help_text='Failed emails')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('error_message', models.TextField(blank=True, help_text='Batch error details')),
                ('retry_count', models.PositiveIntegerField(default=0, help_text='Number of retry attempts')),
                ('campaign', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='queues', to='bulk_email_sender.emailcampaign')),
            ],
            options={
                'verbose_name': 'Email Queue',
                'verbose_name_plural': 'Email Queues',
                'ordering': ['campaign', 'batch_number'],
                'unique_together': {('campaign', 'batch_number')},
            },
        ),
    ]
