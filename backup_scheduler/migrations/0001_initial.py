# Generated by Django 5.0.2 on 2025-08-10 17:17

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='BackupAlert',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('alert_type', models.CharField(choices=[('success', 'Success'), ('warning', 'Warning'), ('failure', 'Failure'), ('storage_full', 'Storage Full'), ('retention_cleanup', 'Retention Cleanup')], max_length=20)),
                ('channel', models.CharField(choices=[('email', 'Email'), ('sms', 'SMS'), ('webhook', 'Webhook'), ('dashboard', 'Dashboard')], max_length=20)),
                ('recipients', models.JSONField(default=list)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Backup Alert',
                'verbose_name_plural': 'Backup Alerts',
            },
        ),
        migrations.CreateModel(
            name='BackupScope',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('full_database', 'Full Database'), ('customers', 'Customers'), ('items', 'Items'), ('transactions', 'Transactions'), ('financial_data', 'Financial Data'), ('documents', 'Documents'), ('custom', 'Custom Selection')], max_length=50, unique=True)),
                ('description', models.TextField()),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Backup Scope',
                'verbose_name_plural': 'Backup Scopes',
            },
        ),
        migrations.CreateModel(
            name='BackupType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('full', 'Full Backup'), ('incremental', 'Incremental Backup'), ('differential', 'Differential Backup')], max_length=50, unique=True)),
                ('description', models.TextField()),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Backup Type',
                'verbose_name_plural': 'Backup Types',
            },
        ),
        migrations.CreateModel(
            name='StorageLocation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('storage_type', models.CharField(choices=[('local', 'Local Storage'), ('network', 'Network Storage'), ('cloud', 'Cloud Storage'), ('ftp', 'FTP Server'), ('s3', 'Amazon S3'), ('azure', 'Azure Blob'), ('gcp', 'Google Cloud Storage')], max_length=20)),
                ('path', models.CharField(max_length=500)),
                ('credentials', models.JSONField(blank=True, default=dict)),
                ('is_active', models.BooleanField(default=True)),
                ('max_capacity_gb', models.PositiveIntegerField(default=100)),
                ('used_capacity_gb', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Storage Location',
                'verbose_name_plural': 'Storage Locations',
            },
        ),
        migrations.CreateModel(
            name='BackupExecution',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('execution_id', models.UUIDField(default=uuid.uuid4, unique=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('running', 'Running'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('duration_seconds', models.PositiveIntegerField(blank=True, null=True)),
                ('file_path', models.CharField(blank=True, max_length=500)),
                ('file_size_mb', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('checksum', models.CharField(blank=True, max_length=64)),
                ('error_message', models.TextField(blank=True)),
                ('error_details', models.JSONField(blank=True, default=dict)),
                ('is_manual', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('triggered_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Backup Execution',
                'verbose_name_plural': 'Backup Executions',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='BackupLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('level', models.CharField(choices=[('info', 'Info'), ('warning', 'Warning'), ('error', 'Error'), ('critical', 'Critical')], max_length=20)),
                ('message', models.TextField()),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('additional_data', models.JSONField(blank=True, default=dict)),
                ('execution', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='backup_scheduler.backupexecution')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Backup Log',
                'verbose_name_plural': 'Backup Logs',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='BackupSchedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('frequency', models.CharField(choices=[('daily', 'Daily'), ('weekly', 'Weekly'), ('monthly', 'Monthly'), ('yearly', 'Yearly'), ('custom', 'Custom')], max_length=20)),
                ('start_time', models.TimeField()),
                ('start_date', models.DateField()),
                ('is_active', models.BooleanField(default=True)),
                ('weekday', models.IntegerField(blank=True, choices=[(0, 'Monday'), (1, 'Tuesday'), (2, 'Wednesday'), (3, 'Thursday'), (4, 'Friday'), (5, 'Saturday'), (6, 'Sunday')], null=True)),
                ('day_of_month', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(31)])),
                ('cron_expression', models.CharField(blank=True, max_length=100)),
                ('retention_days', models.PositiveIntegerField(default=30)),
                ('max_backups', models.PositiveIntegerField(default=10)),
                ('allow_parallel', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('backup_scope', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backup_scheduler.backupscope')),
                ('backup_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backup_scheduler.backuptype')),
                ('storage_location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backup_scheduler.storagelocation')),
            ],
            options={
                'verbose_name': 'Backup Schedule',
                'verbose_name_plural': 'Backup Schedules',
            },
        ),
        migrations.AddField(
            model_name='backupexecution',
            name='schedule',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='backup_scheduler.backupschedule'),
        ),
        migrations.AddField(
            model_name='backupexecution',
            name='backup_scope',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backup_scheduler.backupscope'),
        ),
        migrations.CreateModel(
            name='BackupRetentionPolicy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('retention_days', models.PositiveIntegerField()),
                ('retention_count', models.PositiveIntegerField()),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('backup_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backup_scheduler.backuptype')),
            ],
            options={
                'verbose_name': 'Retention Policy',
                'verbose_name_plural': 'Retention Policies',
            },
        ),
        migrations.AddField(
            model_name='backupexecution',
            name='backup_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backup_scheduler.backuptype'),
        ),
        migrations.CreateModel(
            name='DisasterRecoveryPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('recovery_procedures', models.JSONField(default=dict)),
                ('test_schedule', models.CharField(max_length=100)),
                ('last_tested', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('backup_execution', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backup_scheduler.backupexecution')),
            ],
            options={
                'verbose_name': 'Disaster Recovery Plan',
                'verbose_name_plural': 'Disaster Recovery Plans',
            },
        ),
        migrations.AddField(
            model_name='backupexecution',
            name='storage_location',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backup_scheduler.storagelocation'),
        ),
    ]
