# Generated by Django 5.0.2 on 2025-08-10 20:13

import django.core.serializers.json
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AlertRule',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('is_active', models.BooleanField(default=True)),
                ('trigger_type', models.CharField(choices=[('THRESHOLD', 'Threshold Exceeded'), ('PATTERN', 'Pattern Detected'), ('ANOMALY', 'Anomaly Detected'), ('SCHEDULE', 'Scheduled'), ('MANUAL', 'Manual Trigger')], max_length=20)),
                ('trigger_conditions', models.JSONField(encoder=django.core.serializers.json.DjangoJSONEncoder)),
                ('alert_type', models.CharField(choices=[('EMAIL', 'Email'), ('SMS', 'SMS'), ('WEBHOOK', 'Webhook'), ('DASHBOARD', 'Dashboard'), ('SLACK', 'Slack'), ('TEAMS', 'Microsoft Teams')], max_length=20)),
                ('recipients', models.JSONField(blank=True, default=list)),
                ('message_template', models.TextField()),
                ('threshold_value', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('time_window_minutes', models.PositiveIntegerField(blank=True, null=True)),
                ('last_triggered', models.DateTimeField(blank=True, null=True)),
                ('trigger_count', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Alert Rule',
                'verbose_name_plural': 'Alert Rules',
                'db_table': 'alert_rules',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='RetentionPolicy',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('policy_type', models.CharField(choices=[('ACTIVITY_LOGS', 'Activity Logs'), ('SECURITY_EVENTS', 'Security Events'), ('AUDIT_TRAILS', 'Audit Trails'), ('COMPLIANCE_REPORTS', 'Compliance Reports'), ('USER_SESSIONS', 'User Sessions')], max_length=30)),
                ('description', models.TextField()),
                ('retention_period_days', models.PositiveIntegerField()),
                ('archive_after_days', models.PositiveIntegerField(blank=True, null=True)),
                ('delete_after_days', models.PositiveIntegerField(blank=True, null=True)),
                ('compliance_standards', models.JSONField(blank=True, default=list)),
                ('legal_requirements', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Retention Policy',
                'verbose_name_plural': 'Retention Policies',
                'db_table': 'retention_policies',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ActivityLog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('timestamp', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('log_level', models.CharField(choices=[('DEBUG', 'Debug'), ('INFO', 'Information'), ('WARNING', 'Warning'), ('ERROR', 'Error'), ('CRITICAL', 'Critical')], default='INFO', max_length=10)),
                ('activity_type', models.CharField(choices=[('LOGIN', 'User Login'), ('LOGOUT', 'User Logout'), ('CREATE', 'Data Creation'), ('UPDATE', 'Data Update'), ('DELETE', 'Data Deletion'), ('VIEW', 'Data View'), ('EXPORT', 'Data Export'), ('IMPORT', 'Data Import'), ('BACKUP', 'Backup Operation'), ('RESTORE', 'Restore Operation'), ('PERMISSION_CHANGE', 'Permission Change'), ('APPROVAL', 'Approval Action'), ('REJECTION', 'Rejection Action'), ('SYSTEM', 'System Event'), ('SECURITY', 'Security Event'), ('COMPLIANCE', 'Compliance Event')], db_index=True, max_length=20)),
                ('user_ip', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True)),
                ('session_id', models.CharField(blank=True, max_length=100)),
                ('object_id', models.PositiveIntegerField(blank=True, null=True)),
                ('action', models.CharField(db_index=True, max_length=255)),
                ('description', models.TextField(blank=True)),
                ('module', models.CharField(db_index=True, max_length=100)),
                ('old_values', models.JSONField(blank=True, encoder=django.core.serializers.json.DjangoJSONEncoder, null=True)),
                ('new_values', models.JSONField(blank=True, encoder=django.core.serializers.json.DjangoJSONEncoder, null=True)),
                ('metadata', models.JSONField(blank=True, encoder=django.core.serializers.json.DjangoJSONEncoder, null=True)),
                ('tags', models.JSONField(blank=True, default=list)),
                ('is_sensitive', models.BooleanField(default=False)),
                ('compliance_category', models.CharField(blank=True, max_length=50)),
                ('data_hash', models.CharField(blank=True, max_length=64)),
                ('signature', models.TextField(blank=True)),
                ('retention_date', models.DateTimeField(blank=True, null=True)),
                ('is_archived', models.BooleanField(default=False)),
                ('archive_location', models.CharField(blank=True, max_length=255)),
                ('content_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='erp_activity_logs', to='contenttypes.contenttype')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='erp_activity_logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Activity Log',
                'verbose_name_plural': 'Activity Logs',
                'db_table': 'activity_logs',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='AuditTrail',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('trail_name', models.CharField(max_length=255)),
                ('trail_type', models.CharField(choices=[('DATA', 'Data Changes'), ('ACCESS', 'Access Log'), ('PERMISSION', 'Permission Changes'), ('WORKFLOW', 'Workflow Changes'), ('SECURITY', 'Security Events')], max_length=20)),
                ('object_id', models.PositiveIntegerField()),
                ('description', models.TextField(blank=True)),
                ('start_date', models.DateTimeField(auto_now_add=True)),
                ('end_date', models.DateTimeField(blank=True, null=True)),
                ('compliance_requirements', models.JSONField(blank=True, default=list)),
                ('retention_policy', models.CharField(blank=True, max_length=100)),
                ('activity_logs', models.ManyToManyField(related_name='audit_trails', to='activity_logs.activitylog')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
            ],
            options={
                'verbose_name': 'Audit Trail',
                'verbose_name_plural': 'Audit Trails',
                'db_table': 'audit_trails',
                'ordering': ['-start_date'],
            },
        ),
        migrations.CreateModel(
            name='ComplianceReport',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('report_name', models.CharField(max_length=255)),
                ('report_type', models.CharField(choices=[('SOX', 'Sarbanes-Oxley'), ('GDPR', 'General Data Protection Regulation'), ('ISO27001', 'ISO 27001'), ('HIPAA', 'Health Insurance Portability and Accountability Act'), ('PCI_DSS', 'Payment Card Industry Data Security Standard'), ('CUSTOM', 'Custom Compliance')], max_length=20)),
                ('generated_at', models.DateTimeField(auto_now_add=True)),
                ('report_data', models.JSONField(encoder=django.core.serializers.json.DjangoJSONEncoder)),
                ('report_summary', models.TextField()),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('is_approved', models.BooleanField(default=False)),
                ('approved_at', models.DateTimeField(blank=True, null=True)),
                ('pdf_file', models.FileField(blank=True, null=True, upload_to='compliance_reports/')),
                ('csv_file', models.FileField(blank=True, null=True, upload_to='compliance_reports/')),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_reports', to=settings.AUTH_USER_MODEL)),
                ('generated_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Compliance Report',
                'verbose_name_plural': 'Compliance Reports',
                'db_table': 'compliance_reports',
                'ordering': ['-generated_at'],
            },
        ),
        migrations.CreateModel(
            name='SecurityEvent',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('timestamp', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('event_type', models.CharField(choices=[('LOGIN_FAILURE', 'Login Failure'), ('UNAUTHORIZED_ACCESS', 'Unauthorized Access'), ('PERMISSION_VIOLATION', 'Permission Violation'), ('DATA_BREACH', 'Data Breach'), ('SYSTEM_INTRUSION', 'System Intrusion'), ('MALWARE_DETECTION', 'Malware Detection'), ('ANOMALOUS_ACTIVITY', 'Anomalous Activity')], max_length=30)),
                ('severity', models.CharField(choices=[('LOW', 'Low'), ('MEDIUM', 'Medium'), ('HIGH', 'High'), ('CRITICAL', 'Critical')], max_length=10)),
                ('source_ip', models.GenericIPAddressField()),
                ('source_location', models.CharField(blank=True, max_length=100)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('details', models.JSONField(blank=True, encoder=django.core.serializers.json.DjangoJSONEncoder, null=True)),
                ('is_resolved', models.BooleanField(default=False)),
                ('resolution_notes', models.TextField(blank=True)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('related_logs', models.ManyToManyField(related_name='security_events', to='activity_logs.activitylog')),
                ('resolved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resolved_security_events', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Security Event',
                'verbose_name_plural': 'Security Events',
                'db_table': 'security_events',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.AddIndex(
            model_name='activitylog',
            index=models.Index(fields=['timestamp', 'activity_type'], name='activity_lo_timesta_1141af_idx'),
        ),
        migrations.AddIndex(
            model_name='activitylog',
            index=models.Index(fields=['user', 'timestamp'], name='activity_lo_user_id_e40ffe_idx'),
        ),
        migrations.AddIndex(
            model_name='activitylog',
            index=models.Index(fields=['module', 'timestamp'], name='activity_lo_module_2f7591_idx'),
        ),
        migrations.AddIndex(
            model_name='activitylog',
            index=models.Index(fields=['content_type', 'object_id'], name='activity_lo_content_edc5bf_idx'),
        ),
        migrations.AddIndex(
            model_name='activitylog',
            index=models.Index(fields=['is_sensitive', 'timestamp'], name='activity_lo_is_sens_04dda7_idx'),
        ),
        migrations.AddIndex(
            model_name='activitylog',
            index=models.Index(fields=['compliance_category', 'timestamp'], name='activity_lo_complia_66db6f_idx'),
        ),
        migrations.AddIndex(
            model_name='audittrail',
            index=models.Index(fields=['content_type', 'object_id'], name='audit_trail_content_1f782d_idx'),
        ),
        migrations.AddIndex(
            model_name='audittrail',
            index=models.Index(fields=['trail_type', 'start_date'], name='audit_trail_trail_t_47c3c6_idx'),
        ),
        migrations.AddIndex(
            model_name='compliancereport',
            index=models.Index(fields=['report_type', 'start_date', 'end_date'], name='compliance__report__f7316b_idx'),
        ),
        migrations.AddIndex(
            model_name='compliancereport',
            index=models.Index(fields=['generated_by', 'generated_at'], name='compliance__generat_440bc4_idx'),
        ),
        migrations.AddIndex(
            model_name='securityevent',
            index=models.Index(fields=['timestamp', 'severity'], name='security_ev_timesta_aefd99_idx'),
        ),
        migrations.AddIndex(
            model_name='securityevent',
            index=models.Index(fields=['event_type', 'is_resolved'], name='security_ev_event_t_373b40_idx'),
        ),
        migrations.AddIndex(
            model_name='securityevent',
            index=models.Index(fields=['user', 'timestamp'], name='security_ev_user_id_6a5f21_idx'),
        ),
    ]
